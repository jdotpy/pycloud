#!/usr/bin/env python

import argparse
import getpass
import sys
import os

from pycloud.core.security import AESEncryption

class VaultFile():
    encoding = 'utf-8'

    def __init__(self, path, key=None):
        self.path = path
        self.key = key

    def metadata(self):
        contents = json.loads(self._raw_read())
        contents.pop('data', None) 
        return contents

    def _raw_read(self):
        with open(self.path, 'r') as f:
            return f.read()

    def _raw_write(self, data):
        with open(self.path, 'w') as f:
            return f.write(data)

    def read(self):
        metadata = self._raw_read(self)
        encrypted_payload = metadata.pop('data')
        assert contents['encryption_method'] == 'AES'
        payload = AESEncryption(self.key, encoding=self.encoding).decrypt(encrypted_payload)
        payload = self._data_load(payload)
        return metadata, payload

    def write(self, payload, extra_metadata=None):
        payload = self._data_prep(payload)
        payload = AESEncryption(self.key, encoding=self.encoding).encrypt(payload)
        metdata = extra_metadata or {}
        metadata.update({
            'data': payload,
            'info': 'This file is a VaultFile generated by pycloud.',
            'encryption_method': 'AES',
        })
        self.raw_write(json.dumps(metadata))

    def verify_key(self, key):
        return False

    def exists(self):
        """ Really dumb check to see if file exists. Race conditions are acceptable"""
        return os.path.exists(self.path)

class JsonVaultFile(VaultFile):
    encoding = 'utf-8'

    def data_prep(self, data):
        return json.dumps(data)

    def data_load(self, data):
        return json.loads(data)

class Vault():
    def __init__(self, data_file, private_key=None, key_db=None, user=None):
        self.data_file_location = data_file
        self.private_key = private_key
        self.key_db_location = key_db
        self.user = user
        self.metadata = None
        self.data = None

    def get_encryption_key(self):
        if 
        self.load(metadata_only=True)
        self.me
            se

    def load(self, metadata_only=False):
        if metadata_only:
            data_file = JsonVaultFile(self.data_file_location)
            self.metadata = data_file.metadata()
        else:
            data_file = JsonVaultFile(self.data_file_location, self.get_encryption_key())
            self.metadata, self.data = data_file.read()

    def save(self, data=None):
        if data is None
            data = self.data
        if not data:
            data = {}
        data_file = JsonVaultFile(self.data_file_location, self.get_encryption_key()):
        metadata, payload = data_file.read()
        return True

def vault_cli(source):
    parser = argparse.ArgumentParser(description='Create update')
    parser.add_argument('vault_location', nargs=1)
    parser.add_argument('action', nargs=1)
    parser.add_argument('-k', '--key_db', default=None)
    parser.add_argument('-u', '--user', default=getpass.getuser())
    parser.add_argument('-i', '--private_key', default=None)
    args = parser.parse_args(source)
    vault = Vault(
        args.vault_location, 
        key_db=args.key_db,
        user=args.user,
        private_key=args.private_key
    )

if __name__ == '__main__':
    source = sys.argv[1:]
    vault_cli(source)
